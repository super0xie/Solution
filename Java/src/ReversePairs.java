import java.util.Arrays;

public class ReversePairs {
	
	private int res = 0;
	public int reversePairs(int[] nums) {
		
        mergeSort(nums, 0, nums.length-1);
        return res;
    }
	
	private void mergeSort(int[] nums, int start, int end) {
		if(start >= end) return;
		
		int mid = start + (end - start) / 2;
		
		mergeSort(nums, start, mid);
		mergeSort(nums, mid+1, end);
		
		for(int i = start, j=mid+1; i <= mid; i++) {
			while(j <= end && nums[i] / 2.0 > nums[j]) j++;
			res += j-mid-1;
		}
		
		Arrays.sort(nums, start, end+1);
	}
	
	public int reversePairsErr(int[] nums) {
		long[] num = new long[nums.length];
		
		for(int i = 0; i < nums.length; i++) {
			num[i] = nums[i];
		}
        mergeSortErr(num, 0, nums.length-1);
        return res;
    }
	
	private void mergeSortErr(long[] nums, int start, int end) {
		if(start >= end) return;
		
		int mid = start + (end - start) / 2;
		
		mergeSortErr(nums, start, mid);
		mergeSortErr(nums, mid+1, end);
		
		long[] aux = new long[end-start+1];
		
		int idx = 0;
		int i = start;
		int j = mid+1;
		
		while(i <= mid || j <= end) {
			if(i <= mid && j <= end) {
				if(nums[i] < nums[j]) {
					aux[idx++] = nums[i++];
				}else {
					long target = 2 * nums[j] + 1;
					int bs = Arrays.binarySearch(nums, i, mid+1, target);
					if(bs >= 0) {
						res += mid - bs + 1;
					}else {
						int ip = -bs-1;
						res += mid - ip + 1;
					}
					aux[idx++] = nums[j++];
				}
			}else if(i <= mid) {
				aux[idx++] = nums[i++];
			}else if(j <= end) {
				aux[idx++] = nums[j++];
			}
		}
		
		for(int k = 0; k < aux.length; k++) {
			nums[start+k] = aux[k];
		}
	}
	
	public static void main(String[] args) {
		int[] nums = {-185,143,-154,-338,-269,287,214,313,165,-364,-22,-5,9,-212,46,328,-432,-47,317,206,-112,-9,-224,-207,6,198,290,27,408,155,111,-230,-2,-266,84,-224,-317,39,-482,159,35,132,-151,70,-179,104,-156,450,-13,216,190,238,-138,354,171,-398,-36,417,26,-27,-142,478,-362,-91,-262,-11,469,248,-286,-269,-69,-221,-70,26,484,-31,-236,-173,-380,-8,312,-138,-96,23,-7,39,-345,269,156,349,200,52,193,152,168,159,181,272,-259,210,76,194,-31,139,392,-16,-151,50,166,45,9,44,-179,151,-8,75,-277,-18,49,314,-332,449,24,362,88,159,14,-279,232,211,-206,-192,27,238,-339,-79,30,-370,-29,81,251,-189,21,-202,-41,198,51,-6,172,108,26,-168,316,271,-76,-20,-249,-111,47,-86,303,35,127,113,-181,289,-105,-30,-16,-9,95,-144,-422,198,320,7,-227,-161,447,486,-406,-121,-280,-76,285,-453,42,15,-335,-189,-154,280,-206,68,-313,-375,-401,47,184,-320,369,-146,-60,150,378,87,102,138,-54,169,33,-339,-19,147,333,84,92,-57,104,76,-239,99,300,217,-140,153,-344,-103,-6,-37,399,323,-138,279,-259,217,172,-94,-55,29,462,-327,-177,-163,-444,-84,-281,-87,350,-180,20,0,46,331,-15,-244,-370,69,-194,-30,-85,-112,-235,-242,-188,231,123,-233,-29,113,-294,90,64,-3,-364,55,120,-48,-323,99,-76,-70,79,-351,300,-44,-30,25,334,-199,-68,-451,19,57,293,-188,-16,-46,-392,-162,50,-304,23,166,-130,-146,-35,-141,-25,124,-239,114,-104,285,-108,-137,177,-129,-443,341,-112,134,-293,-181,278,203,442,-206,-20,457,-267,171,-321,208,-4,8,-16,-474,-214,-18,-139,-129,-239,-152,45,443,160,-226,338,-384,198,-77,398,296,-405,-156,290,87,-423,-15,-374,127,259,-20,-62,426,-86,-44,184,-207,257,44,-106,-166,260,-181,-282,-68,-90,-39,-3,375,415,20,-207,391,-201,-143,60,242,-192,-74,426,-86,1,74,208,107,-92,114,-37,145,-216,99,319,-298,124,243,73,-127,-139,56,298,24,-354,30,-166,175,82,187,-24,112,-22,-392,-166,-376,470,139,284,-93,162,-160,89,-240,36,-380,-58,-249,104,-1,-172,198,-70,-381,29,20,305,-197,-253,-145,72,98,-375,-152,91,96,-64,170,142,66,398,97,-19,-298,-175,118,-77,-361,354,-29,-47,71,231,-174,-11,-347,-87,36,-318,50,-157,-182,-348,10,96,-241,-82,473,-50,-10,-75,-148,71,20,119,-37,-188,35,65,-346,50,256,-20,-80,-358,419,6,-341,24,-113,-169,108,-488,-334,249,234,-73,-208,19,-264,-89,-41,66,-3,17,-95,2,-143,-11,-348,-324,-366,-183,-148,-76,-197,201,57,-94,-1,0,43,-6,70,-183,71,-304,58,-35,359,103,238,93,331,59,24,-145,92,-34,3,147,-241,-54,-90,1,313,-116,436,162,258,468,-154,-31,111,207,-484,-19,440,201,9,-230,11,-355,246,-78,295,-84,97,43,317,158,-78,183,132,-265,360,-398,-284,-69,212,112,-236,-111,108,266,200,386,-355,36,-3,-3,304,205,-142,-250,8,-45,-35,-165,54,390,175,-44,-255,-207,-64,431,-186,-279,-126,-65,-211,42,246,27,-302,-342,-386,-193,-123,216,71,-391,-343,3,-15,-486,138,142,463,27,-126,-84,39,188,145,402,-260,41,423,6,-86,10,418,-4,-37,-256,-345,-47,49,314,-169,-81,-351,218,-163,0,-6,-432,189,245,-167,92,2,-83,-176,-312,222,108,-18,-119,193,-84,87,-299,220,2,-323,-61,-300,-142,142,223,90,211,107,326,-43,247,43};
		ReversePairs test = new ReversePairs();
		test.reversePairsErr(nums);
	}
	

}
