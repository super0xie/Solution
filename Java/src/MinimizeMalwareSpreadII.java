import java.util.Arrays;

public class MinimizeMalwareSpreadII {
	
	public int minMalwareSpread(int[][] graph, int[] initial) {
		Arrays.sort(initial);
		int res = initial[0];
		int min = Integer.MAX_VALUE;
        for(int i = 0; i < initial.length; i++) {
        	boolean [] visited = new boolean[graph.length];
        	for(int j = 0; j < initial.length; j++) {
        		dfs(graph, initial[j], initial[i], visited);
        	}
        	int count = 0;
        	for(int j = 0; j < visited.length; j++) {
        		if(visited[j]) count++;
        	}
        	if(count < min) {
        		min = count;
        		res = initial[i];
        	}
        }
        return res;
    }
	
	private void dfs(int[][] graph, int i, int v, boolean[] visited) {
		if(i == v) return;
		if(visited[i]) return;
		visited[i] = true;
		
		for(int j = 0; j < graph.length; j++) {
			if(graph[i][j] == 1) dfs(graph, j, v, visited);
		}
	}
	
	public static void main(String[] args) {
		MinimizeMalwareSpreadII test = new MinimizeMalwareSpreadII();
		int[][] graph = {{1,1,0,0},{1,1,0,1},{0,0,1,0},{0,1,0,1}};
		int[] initial = {0, 3};
		System.out.println(test.minMalwareSpread(graph, initial));
	}
	
}
