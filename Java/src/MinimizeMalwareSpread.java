import java.util.Arrays;

public class MinimizeMalwareSpread {
	
	public int minMalwareSpread(int[][] graph, int[] initial) {
		Arrays.sort(initial);
        int[] uf = new int [graph.length];
        for(int i = 0; i < uf.length; i++) {
        	uf[i] = i;
        }
        
        for(int i = 0; i < graph.length; i++) {
        	for(int j = i+1; j < graph.length; j++) {
        		if(graph[i][j] == 1)
        			union(uf, i, j);
        	}
        }
        
        int[] count = new int[graph.length];  
        for(int i = 0; i < uf.length; i++) {
        	count[root(uf, i)]++;
        }
        
        int[] countI = new int [graph.length];
        for(int i = 0; i < initial.length; i++) {
        	countI[root(uf, initial[i])]++;
        }
        
        int max = 0;
        int res = initial[0];
        for(int i = 0; i < initial.length; i++) {
        	if(countI[root(uf, initial[i])] > 1) continue;
        	else {
        		int reduce = count[root(uf, initial[i])];
        		if(reduce > max) {
        			max = reduce;
        			res = initial[i];
        		}
        	}
        }
        return res;
    }
	
	private int root(int[] uf, int i) {
        if(uf[i] == i) return i;
        else {
            int res = root(uf, uf[i]);
            uf[i] = res;
            return res;
        }
    }
    
    private void union(int[] uf, int i, int j) {
        int ri = root(uf, i);
        int rj = root(uf, j);
        
        if(ri != rj) {
            uf[ri] = rj;
        }
    }
    
    public static void main(String[] args) {
    	MinimizeMalwareSpread test = new MinimizeMalwareSpread();
    	int[][] graph = {{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
    	int[] initial = {3, 1};
    	System.out.println(test.minMalwareSpread(graph, initial));
    }
	
}
