import java.util.ArrayDeque;
import java.util.HashSet;

public class MinimumJumpstoReachHome {
	
	class Status{
		int i;
		boolean canGoLeft;
		
		Status(int i, boolean canGoLeft){
			this.i = i;
			this.canGoLeft = canGoLeft;
		}
	}
	
	public int minimumJumps(int[] forbidden, int a, int b, int x) {
		if(x == 0) return 0;
        int g = gcd(a, b);
        System.out.println(g);
        if(x % g != 0) return -1;
        int max = 2000 + 2 * b;
        boolean[] forbid = new boolean[2001];
        for(int i : forbidden) forbid[i] = true;
        
        ArrayDeque<Status> q = new ArrayDeque<>();
        q.add(new Status(0, true));
        
        HashSet<Integer> visited = new HashSet<>();
        visited.add(0);
        visited.add(1);
        
        int jump = 1;
        
        while(!q.isEmpty()) {
        	ArrayDeque<Status> aux = new ArrayDeque<>();
        	while(!q.isEmpty()) {
        		Status p = q.poll();
        		if(p.canGoLeft) {
        			int l = p.i - b;
        			if(l == x) return jump;
        			if(l > 0) {
        				int encode = l * 10;
        				if((l >= forbid.length || !forbid[l]) && !visited.contains(encode)) {
        					visited.add(encode);
        					aux.add(new Status(l, false));
        				}
        			}
        		}
        		
        		int l = p.i + a;
        		if(l > max) continue;
        		if(l == x) return jump;
        		int encode = l * 10 + 1;
        		if((l >= forbid.length || !forbid[l]) && !visited.contains(encode)) {
        			visited.add(encode);
        			visited.add(l * 10);
        			aux.add(new Status(l, true));
        		}
        	}
        	q = aux;
        	jump++;
        }
        
        return -1;
    }
	
	private int gcd(int a, int b) {
		if(a < b) {
			int t = a;
			a = b;
			b = t;
		}
		
		while(b != 0) {
			int t = b;
			b = a % b;
			a = t;
		}
		return a;
	}
	
	public static void main(String[] args) {
		MinimumJumpstoReachHome test = new MinimumJumpstoReachHome();
		int[] forbidden = {1678,1572,1919,1892,1655,1105,1075,631,1963,588,1807,1661,1247,666,432,1078,1573,257,1960,742,463,736,1439,1392,802,600,1934,541,53,1809,789,1042,1282,1691,398,691,172,145,1815,964,1210,1993,1054,735,593,287,1142,1130,96,815,1348,1533,1874,1461,629,1757,1003,1711,366,1458,935,410,13,650,664,228,968,1889,1829,1727,1351,48,661,1229,113,1771,349,1522,122,869,561,1380,1709,553,142,1181,1482,948,1862,1033,85,1846,1367,438,1073,118,452,548,456,414,1293,1969,1959,1009,465,1600,1330,1609,45,1484,447,643,1722,977,962,1366,177,29,1183,505,1922,132,1836,1194,585,1500,905,1085,533,859,992,9,1339,477,898,1886,126,1086,822,1324,291,1630,202,873,1333,448,1015,408,68,899,1343,1241,1307,1793,1680,1610,937,1261,80,1456,971,286,810,1581,74,1513,1269,1640,409,69,497,1867,528,303,782,1393,567,380,256,716,1752,344,105,127,70,144,1129,1166,1070,1591,322,613,1633,960,705,843,335,1297,1363,312,324,1331,433,1718,1356,933,468,215,1697,112,141,976,690,1799,1925,446,1623,134,110,1182,720,623,706,1620,1013,31,387,435,1554,1952,542,734,1422,462,405,839,520,718,419,476,36,179,1384,1940,1303,703,271,972,817,1065,797,1403,1237,1898,489,61,209,866,724,1868,379,879,216,218,1243,224,1200,1686,595,1467,361,1287,437,42,1317,376,1068,599,1511,653,1704,1563,1908,1292,1768,1881,1394,443,1171,1487,1972,806,674,1446,1196,149,136,1127,1039,1714,1188,1374,884,1896,1035,684,1565,1945,1739,1051,954,609,1036,1627,1909,1710,1918,1350,1787,371,1723,617,1503,299,1682,508,357,1173,717,1532,1413,980,833};
//		int[] forbidden = {880,524,1285,1555,1782,1744,1090,1572,27,1750,587,591,1491,294,627,1080,366,688,348,748,44,816,1735,481,1638,207,1924,598,37,720,593,1640,393,585,1042,286,1157,1325,1998,52,399,285,1541,528,1437,1717,1052,411,1079,341,297,148,1585,1601,968,836,680,199,290,689,1480,581,1988,758,456,158,268,1626,1427,1270,1797,537,795,1095,1498,1922,1115,881,183,907,855,98,529,1295,142,1568,442,497,887,834,703,755,1376,461,1296,913,504,488,678,840,1961,1449,1648,1355,760,1622,866,679,1265,1286,237,377,302,1681,1151,931,367,1597,168,895,1135,1349,1459,1329,723,1869,93,344,856,1273,31,1386,1225,48,1125,128,494,389,1353,1117,505,275,1322,1962,1444,254,750,1792,1248,1013,1707,155,1136,1390,978,1168,76,985,233,1899,530,952,734,1461,1870,139,438,1119,186,1277,966,1167,1417,1131,1408,1561,30,1432,574,1814,1511,607,1438,1441,1338,88,1887,416,770,485,666,759,152,575,1255,1897,153,805,846,1453,368,589,1581,634,1970,1866,1700,541,1604,1803,401,1929,909,1082,1991,1006,1567,550,1763,844,751,1384,242,1733,1254,527,1246,174,247,900,217,130,71,1886,1448,1658,544,872,1465,413,493,1054,709,425,893,490,360,414,653,1634,109,917,1074,1872,1984,1898,1764,1727,763,572,459,506,883,1181,1434,163,691,439,1315,1045,1545,739,108,270,1385,1927,296,578,1650,588,789,507,1397,172,185,329,1342,215,1668,1468,791,1046,132,1851,672,774,674,312,615,470,1425,1904,1339,704,690,1009,1902,1712,72,977,745,500,1508,1807,1537,343,1575,616,468,1001,1470,1844,1120,1560,1909,1237,1290,661,1553,1786,1413,741,1331,823,169,1582,1651,1391,390,1150,1765,1831,1424,1800,472,1751,1804,1957,712,173,1359,19,450,116,682,1609,193,673,1138,1165,710,1411,499,543,1087,1262,225,1693,125,619,1689,469,1755,1701,1021,1660,91,1837,1428,1613,1817,1380,1210,176,676,147,320,1810,141,669,1423,1457,901,642,1289,1552,1152,1452,681,639,1250,1586,330,32,1089,557,546,1404,1642,160,969,1736,1776,353,1719,230,1995,980,1905,20,82,1235,446,63,991,1950,1649,1051,1931,1706,1111,65,815,440,579,1868,288,711,1350,55,722,265,1746,1587,1101,1358,924,1172,303,1302,1559,412,1169,278,355,914,1323,858,848,316,637,281,89,427,719,1412,211,1132,1450,333,1620,467,1108,349,429,636,1313,1832,1307,57,1276,49,107,1629,1354,628,620,808,181,1003,1191,956,600,1528,1188,842,117,518,746,1544,1280,873,1963,1823,631,1196,221,190,1259,626,4,1980,841,1292,1026,204,622,601,1008,35,1106,350,23,1769,1377,1684,257,1251,253,549,319,379,274,75,226,1989,1153,1656,1005,1471,1512,1781,1308,1093,1737,1881,655,22,1771,1593,769,60,223,1100,724,1718,1190,189,1983,826,365,1123,1520,1708,1389,625,3,280,1513,767,787,157,5,595,818,347,1867,1666,1985,888,145,576,686,1257,1678,539,502,12,910,765,903,935,140,804,1154,1455,1969,143,1890,1164,397,1160};
		System.out.println(test.minimumJumps(forbidden, 341
				,1378
				,377));
	}
	
}
