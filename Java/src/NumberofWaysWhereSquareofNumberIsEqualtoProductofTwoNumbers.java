import java.util.HashMap;

public class NumberofWaysWhereSquareofNumberIsEqualtoProductofTwoNumbers {
	
	public int numTriplets(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> m1 = new HashMap<>();
        HashMap<Integer, Integer> m2 = new HashMap<>();
        
        for(int i : nums1) m1.put(i, m1.getOrDefault(i, 0)+1);
        for(int i : nums2) m2.put(i, m2.getOrDefault(i, 0)+1);
        
        int res = 0;
        
        for(int i : m1.keySet()) {
        	long s = (long)i * i;
        	int count = m1.get(i);
        	for(int j : m2.keySet()) {
        		if(j > i) continue;
        		if(s % j == 0) {
        			int k = (int)(s / j);
        			if(m2.containsKey(k)) {
        				if(j != k) {
        					res += count * m2.get(j) * m2.get(k);
        				}else {
        					res += count * m2.get(j) * (m2.get(j)-1) / 2;
        				}
        			}
        		}
        	}
        }
        
        
        for(int i : m2.keySet()) {
        	long s = (long)i * i;
        	int count = m2.get(i);
        	for(int j : m1.keySet()) {
        		if(j > i) continue;
        		if(s % j == 0) {
        			int k = (int)(s / j);
        			if(m1.containsKey(k)) {
        				if(j != k) {
        					res += count * m1.get(j) * m1.get(k);
        				}else {
        					res += count * m1.get(j) * (m1.get(j)-1) / 2;
        				}
        			}
        		}
        	}
        }
        
        return res;
        
    }
	
	public static void main(String[] args) {
		int[] nums1 = {};
		int[] nums2 = {};
		NumberofWaysWhereSquareofNumberIsEqualtoProductofTwoNumbers test = new NumberofWaysWhereSquareofNumberIsEqualtoProductofTwoNumbers();
		test.numTriplets(nums1, nums2);
		
	}
	
}
